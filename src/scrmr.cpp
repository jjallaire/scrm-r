#include <Rcpp.h>

#include <iostream>
#include <fstream>
#include <memory>

#include "scrm/param.h"
#include "scrm/forest.h"
#include "scrm/model.h"
#include "scrm/summary_statistics/summary_statistic.h"
#include "scrm/summary_statistics/seg_sites.h"
#include "r_random_generator.h"

using namespace Rcpp;
std::ofstream fs;
bool write_file;

List convertSumStatsToList(const Forest &forest) {
  List r_sum_stats(forest.model().countSummaryStatistics());
  CharacterVector names(forest.model().countSummaryStatistics(), "");

  for (size_t i = 0; i < forest.model().countSummaryStatistics(); ++i) {
    SummaryStatistic* sum_stat = forest.model().getSummaryStatistic(i);  

    if (typeid(*sum_stat) == typeid(SegSites)) {
      SegSites* ss = dynamic_cast<SegSites*>(sum_stat); 
      NumericMatrix seg_sites(forest.model().sample_size(), ss->countMutations());
      for (size_t col = 0; col < ss->countMutations(); ++col) {
        for (size_t row = 0; row < forest.model().sample_size(); ++row) {
          seg_sites(row,col) = (*(ss->getHaplotype(col)))[row];
        }
      }
      seg_sites.attr("dimnames") = List::create(R_NilValue, *(ss->positions()));
      r_sum_stats(i) = seg_sites;
      names(i) = "seg_sites";
    }
  }

  r_sum_stats.names() = names;
  return r_sum_stats;
}

// [[Rcpp::plugins(cpp11)]]

//' Simulation the evolution of biological sequences
//' 
//' @section Seeding:
//' The R version of scrm uses random number generated by R's random generator. 
//' Therefore, its '-seed' argument will be ignored, and no seed is given in its
//' output. Use the R function \code{\link{set.seed}} prior to calling this 
//' function to ensure reproduciblity of results.
//' 
//' @param args A string containing the command line arguments for scrm. Look at
//'             scrms vignette for a description of available arguments.
//' @param file File provided, scrm will additionally write it is output into 
//'             the given file, using an ms-like text format.
//' @export
//' @examples
//' set.seed(17)
//' scrm('5 1 -r 10 100 -t 5')
//' \dontrun{scrm('5 1 -r 10 100 -t 5', file = tempfile('scrm_'))}
// [[Rcpp::export]]
List scrm(std::string args, std::string file = "") {
 
  /** Open a file for writing if 'file' is given */
  if (file.length() > 0) {
    fs.open(file);
    if(!fs) stop(std::string("Failed writing to file ") + file);
    write_file = true;
  } else {
    write_file = false;
  }
  
  /** Parse args and generate the model */
  Param param("scrm " + args);
  if (write_file) fs << param << std::endl;
  Model model;
  param.parse(model);
  
  RRandomGenerator rrg;
  
  /** Throw a warning if -seed argmuent is used */
  Function warning("warning");
  if (param.random_seed() != -1) 
    warning("Ignoring Seed argument. Set a seed in R.");
  
  /** Throw a warning if no summary statistics are used */
  if (model.countSummaryStatistics() == 0)
    warning("No summary statisics specified. No output will be produced.");
  
  List output = List(model.loci_number());
  Forest forest = Forest(&model, &rrg);
  
  // Loop over the independent loci/chromosomes
  for (size_t rep_i=0; rep_i < model.loci_number(); ++rep_i) {
    
    // Mark the start of a new independent sample
    if (write_file) fs << std::endl << "//" << std::endl;
    
    // Now set up the ARG, and sample the initial tree
    forest.buildInitialTree();
    
    while (forest.next_base() < model.loci_length()) { 
      forest.sampleNextGenealogy();
    }
    
    output(rep_i) = convertSumStatsToList(forest);
    if (write_file) forest.printLocusSumStats(fs);
    
    forest.clear();
  }
  
  /** Clean up */
  if (write_file) fs.close();
  rrg.clearFastFunc();
  
  return output;
}
